name: Java CI & Deploy to EC2

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      URL: ${{ secrets.URL }}
      PASSWORD: ${{ secrets.PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle Wrapper (skip tests)
        run: ./gradlew clean bootJar -x test

      - name: Show built JARs
        run: ls -l

      - name: Show built JARs
        run: ls -l build/

      - name: Show built JARs
        run: ls -l build/libs/

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: .

      - name: 다운로드된 파일 확인
        run: |
          echo ">>> build/libs 내용"
          ls -al

      - name: 디스크 트리 구조 확인
        run: |
          echo "=== 루트 디렉터리 ==="
          ls -al .
          echo "=== build/libs 디렉터리 ==="
          ls -al build/libs || echo "build/libs 폴더가 없습니다"

      # - name: Deploy to EC2 via SSH
      #   uses: appleboy/ssh-action@v0.1.8
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     script: |
      #       TIMESTAMP=$(date +%Y%m%d%H%M%S)
      #       JAR_FILE=$(ls build/libs/*.jar)
      #       REMOTE_PATH="/home/${{ secrets.EC2_USER }}/app.jar"
      #       ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "cp $REMOTE_PATH $REMOTE_PATH.$TIMESTAMP || true"
      #       scp -i ${{ secrets.EC2_SSH_KEY }} $JAR_FILE ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:$REMOTE_PATH
      #       ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "sudo systemctl restart ${{ secrets.SERVICE_NAME }}"
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          # 로컬 워크스페이스에서 EC2로 복사할 파일 경로
          source: "build/libs/*.jar"
          # EC2 에 복사할 대상 경로
          target: "/home/ec2-user/app.jar"
          # 복사 후 원격에서 실행할 커맨드
          script: |
            sudo systemctl restart myapp
